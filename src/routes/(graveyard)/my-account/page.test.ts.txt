// import { render, screen } from '@testing-library/svelte'
// import { describe, test, expect, vi } from 'vitest'
// import Page from './+page.svelte'
// import { Events, TournamentName } from '$lib/types'
// import type { MyAccountPageData, UserRecord, Subscription, DrawEntry } from '$lib/types'
// import PageSetup from '$lib/components/PageSetup.test.svelte'

// const mockUser: UserRecord = {
// 	id: 'testuser123',
// 	username: 'Test User',
// 	email: 'test@example.com',
// 	avatar: '',
// 	created: new Date().toISOString(),
// 	updated: new Date().toISOString(),
// 	paddle_customer_id: 'cus_12345',
// 	grandfathered: false,
// 	collectionId: '_pb_users_auth_',
// 	collectionName: 'user',
// 	emailVisibility: false
// }

// const mockSubscription: Subscription = {
// 	id: 'sub_123',
// 	user_id: 'testuser123',
// 	paddle_subscription_id: 'paddle_sub_789',
// 	status: 'active',
// 	current_billing_period_start: new Date().toISOString(),
// 	current_billing_period_end: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000).toISOString(),
// 	created: new Date().toISOString(),
// 	updated: new Date().toISOString(),
// 	collectionId: 'subscriptions_collection_id',
// 	collectionName: 'subscription'
// }

// const mockEntry: DrawEntry = {
// 	id: 'entry1',
// 	user_id: 'testuser123',
// 	draw_id: 'draw1',
// 	name: TournamentName.FRENCH_OPEN,
// 	event: Events.MENS_SINGLES,
// 	year: 2025,
// 	start_date: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000).toISOString(),
// 	end_date: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(),
// 	created: new Date().toISOString(),
// 	collectionId: 'entries_collection_id_example',
// 	collectionName: 'entries_with_draw'
// }

// const mockMyAccountPageData: MyAccountPageData = {
// 	user: mockUser,
// 	subscription: mockSubscription,
// 	entries: [mockEntry],
// 	paddleCustomerPortalUrl: 'https://sandbox-paddle.customer.paddle.com/portal/12345'
// }

// describe('MyAccountPage', () => {
// 	test('Renders the My Account page with user data', () => {
// 		render(PageSetup, {
// 			props: {
// 				component: Page,
// 				data: mockMyAccountPageData
// 			}
// 		})
// 		expect(screen.getByText('My Account')).toBeInTheDocument()
// 		expect(screen.getByText('Subscription Status')).toBeInTheDocument()
// 		expect(screen.getByText('Draw Entries')).toBeInTheDocument()
// 		expect(screen.getByText('Manage Payments')).toBeInTheDocument()
// 	})

// 	test('Renders correctly when user is grandfathered', () => {
// 		const grandfatheredData: MyAccountPageData = {
// 			...mockMyAccountPageData,
// 			user: { ...mockUser, grandfathered: true },
// 			subscription: null
// 		}
// 		render(PageSetup, {
// 			props: {
// 				component: Page,
// 				data: grandfatheredData
// 			}
// 		})
// 		expect(
// 			screen.getByText('Thanks for being an early supporter of Racquet Rivals!')
// 		).toBeInTheDocument()
// 		expect(screen.queryByText('View Plans')).not.toBeInTheDocument()
// 	})

// 	test('Renders correctly with no active subscription and not grandfathered', () => {
// 		const noSubscriptionData: MyAccountPageData = {
// 			...mockMyAccountPageData,
// 			subscription: null,
// 			user: { ...mockUser, grandfathered: false }
// 		}
// 		render(PageSetup, {
// 			props: {
// 				component: Page,
// 				data: noSubscriptionData
// 			}
// 		})
// 		expect(screen.getByText('No active subscription.')).toBeInTheDocument()
// 		const viewPlansLink = screen.getByRole('link', { name: /view plans/i })
// 		expect(viewPlansLink).toBeInTheDocument()
// 		expect(viewPlansLink).toHaveAttribute('href', '/pricing')
// 	})

// 	test('Renders correctly with no draw entries', () => {
// 		const noEntriesData: MyAccountPageData = {
// 			...mockMyAccountPageData,
// 			entries: []
// 		}
// 		render(PageSetup, {
// 			props: {
// 				component: Page,
// 				data: noEntriesData
// 			}
// 		})
// 		expect(screen.getByText('No draw entry purchases.')).toBeInTheDocument()
// 	})

// 	test('Shows manage payments button if paddle_customer_id and portal URL exist', () => {
// 		render(PageSetup, {
// 			props: {
// 				component: Page,
// 				data: mockMyAccountPageData
// 			}
// 		})
// 		const managePaymentsButton = screen.getByRole('button', { name: /manage payments/i })
// 		expect(managePaymentsButton).toBeInTheDocument()
// 	})

// 	test('Does not show manage payments button if paddle_customer_id is missing', () => {
// 		const noCustomerIdData: MyAccountPageData = {
// 			...mockMyAccountPageData,
// 			user: { ...mockUser, paddle_customer_id: '' }
// 		}
// 		render(PageSetup, {
// 			props: {
// 				component: Page,
// 				data: noCustomerIdData
// 			}
// 		})
// 		expect(screen.queryByRole('button', { name: /manage payments/i })).not.toBeInTheDocument()
// 	})

// 	test('Shows error if portal URL is missing but customer ID exists', () => {
// 		const noPortalUrlData: MyAccountPageData = {
// 			...mockMyAccountPageData,
// 			paddleCustomerPortalUrl: ''
// 		}
// 		render(PageSetup, {
// 			props: {
// 				component: Page,
// 				data: noPortalUrlData
// 			}
// 		})
// 		expect(screen.getByText('Error displaying Manage Payments link')).toBeInTheDocument()
// 	})
// })
